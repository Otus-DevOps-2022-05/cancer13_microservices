---
- name: k8s instal and config
  hosts: master
  become: true
  vars:
    node_ip: "{{ ansible_default_ipv4['address'] }}"
    user: ubuntu
    net_cidr: "10.244.0.0/16"
    hostname: "{{ ansible_nodename }}"

  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status

  - name: Add user to docker group
    user:
      name: "{{ user }}"
      group: docker



  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0


  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  - name: Ensure file kubelet exist 
    file:
      path: /etc/default/kubelet
      state: touch

  - name: Configure node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

  - name: remove default /etc/containerd/config.toml
    file:
      path: /etc/containerd/config.toml
      state: absent

  - name: Restart kubelet
    service:
      name: "{{ item }}"
      daemon_reload: yes
      state: restarted
    with_items:
      - kubelet
      - containerd

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address=0.0.0.0 --apiserver-cert-extra-sans="{{ node_ip }}"  --node-name {{ hostname }} --pod-network-cidr="{{ net_cidr }}"
    ignore_errors: true


  - name: "Setup kubeconfig for user"
    command: "{{ item }}"
    with_items:
      - "mkdir -p /home/{{ user }}/.kube"
      - "cp -f /etc/kubernetes/admin.conf /home/{{ user }}/.kube/config"
      - "chown {{ user }}:{{ user }} /home/{{ user }}/.kube/config"

  - name: copy templated calico.yml
    template:
      src: calico.yml
      dest: /home/{{ user }}/.kube/calico.yml

  - name: Install calico pod network
    become: false
    command: kubectl create -f /home/{{ user }}/.kube/calico.yml


  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    become: false
    local_action:
      copy
        content="{{ join_command.stdout_lines[0] }}"
        dest="./join-command"



  handlers:
    - name: docker status
      service: name=docker state=started
